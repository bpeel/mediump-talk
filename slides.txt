SVG: title-page.svg
---
# Overview

* What is mediump?
* What does Mesa currently do?
* The plan
* Reducing conversion operations
* Changing types of variables
* Folding conversions
* Testing
* Code
* Questions?

---

# What is mediump?

---

* Only in GLSL ES
* Available since the first version of GLSL ES.
* Used to tell the driver an operation in a shader can be done with lower precision.
* Some hardware can take advantage of this to trade off precision for speed.

---

* For example, an operation can be done with a 16-bit float:

SVG: precision-diagram.svg

---

* GLSL ES has three available precisions:
  * lowp, mediump and highp
  * The spec specifies a minimum precision for each of these.
  * highp needs 16-bit fractional part.
    * It will probably end up being a single-precision float.
  * mediump needs 10-bit fractional part.
    * This can be represented as a half float.
  * lowp has enough precision to store 8-bit colour channels.

---

* The precision does not affect the visible storage of a variable.
  * For example a mediump float will still be stored as 32-bit in a UBO.
  * Only operations are affected.
* The precision requirements are only a minimum.
  * Therefore a valid implementation could be to just ignore the precision and do every operation at highp.
  * This is effectively what Mesa currently does.

---

* The precision for a variable can be specified directly:

```
uniform mediump vec3 rect_color;
```

* Or it can be specified as a global default for each type:

```
precision mediump float;
uniform vec3 rect_color;
```

---

* The compiler specifies global defaults for most types except floats in the fragment shader.
* In GLSL ES 1.00 high precision support in fragment shaders is optional.

---

* The precision of operands to an operation determine the precision of the operation.
* Almost works like automatic float to double promotion in C.

SVG: simple-multiplication.svg*

---

* Another example

SVG: mix-multiplication.svg*

---

* Corner case
  * Some things don’t have a precision, eg constants.

SVG: constant-no-precision.svg*

---

* Extreme corner case
  * Sometimes none of the operands have a precision.

SVG: no-operand-has-precision.svg*

---

# What does Mesa currently do?

---

* Mesa already has code to parse the precision qualiers and store them in the IR tree.
* These currently aren’t used for anything except to check for compile-time errors.
  * For example redeclaring a variable with a different precision.
* In desktop GL, the precision is always set to NONE.

---

* The precision usually doesn’t form part of the glsl_type.
* Instead it is stored out-of-band as part of the ir_variable.

---
```
enum {
   GLSL_PRECISION_NONE = 0,
   GLSL_PRECISION_HIGH,
   GLSL_PRECISION_MEDIUM,
   GLSL_PRECISION_LOW
};
```
---

```
#include var-precision.cpp
```

---

* However this gets complicated for structs because members can have their own precision.

```
uniform block {
	mediump vec3 just_a_color;
	highp mat4 important_matrix;
} things;
```

* In that case the precision does end up being part of the glsl_type.

---

# The plan

---

* The idea is to lower mediump operations to float16 types in NIR.
* We want to lower the actual operations instead of the variables.
* This needs to be done at a high level in order to implement the spec rules.

---

* Work being done by Hyunjun Ko and myself and Igalia.
* Working on behalf of Google.
* Based on / inspired by patches by Topi Pohjolainen.

---

* Aiming specifically to make this work on the Freedreno driver.
* Most of the work is reusable for any driver though.
* Currently this is done as a pass over the IR representation.

---

SVG: simple-division.svg*

---

* We only want to lower the division operation without changing the type of the variables.
* The lowering pass will add a conversion to float16 around the variable dereferences and then add a conversion back to float32 after the division.
* This minimises the modifications to the IR.

---

* IR tree before lowering pass

SVG: ir-tree.svg*

---

* Lowering pass finds sections of the tree involving only mediump/lowp operations.
* Adds f2f16 conversion after variable derefs
* Adds f2f32 conversion at root of lowered branch

---

* IR tree after lowering pass

SVG: ir-tree-after.svg*=

---

# Reducing conversion operations

---

* This will end up generating a lot of conversion operations.
* Worse:

SVG: worse.svg*=

---

* Resulting NIR

SVG: nir-lots-conv.svg*

---

* There is a NIR optimisation to remove redundant conversions
* Only enabled for GLES because converting f32→f16→f32 is not lossless

---

# Changing types of variables

---

* Normally we don’t want to change the type of variables
* For example, this would break uniforms because they are visible to the app
* Sometimes we can do it anyway though depending on the hardware

---

* On Freedreno, we can change the type of the fragment outputs if they are mediump.
* gl_FragColor is declared as mediump by default
* The variable type is not user-visible so it won’t break the app.
* This removes a conversion.
* We have a specific pass for Freedreno to do this.

---

SVG: change-frag-output-type.svg

---

SVG: change-frag-output-type-2.svg

---

SVG: change-frag-output-type-3.svg

---

# Folding conversions

---

* Consider this simple fragment shader

SVG: folding-glsl-example.svg*=

---

* This can generate an IR3 disassembly like this:

SVG: folding-ir3-example.svg*=

---

* This last conversion shouldn’t be necessary.
* Adreno allows the destination register to have a different size from the source registers.
* We can fold the conversion directly into the multiplication.

---

* We have added a pass on the NIR that does this folding.
* It requires changes the NIR validation to allow the dest to have a different size.
* Only enabled for Freedreno.

---

SVG: nir-folding-1.svg

---

SVG: nir-folding-2.svg

---

SVG: nir-folding-3.svg*=

---

# Testing

---

* We are writing Piglit tests that use mediump
* Most of them check that the result is less accurate than if it was done at highp
* That way we catch regressions where we break the lowering
* These tests couldn’t be merged into Piglit proper because not lowering would be valid behaviour.

---

# Code

---

* The code is at gitlab.freedesktop.org/zzoon on the mediump branch
* There are also merge requests (1043, 1044, 1045).
* Piglit tests are at: https://github.com/Igalia/piglit/
  * branch nroberts/wip/mediump-tests

---

# Questions?
